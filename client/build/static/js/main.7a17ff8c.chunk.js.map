{"version":3,"sources":["Components/MainApp/index.js","Components/Landing/index.js","App.js","serviceWorker.js","index.js"],"names":["MainApp","props","state","console","log","faceapi","video","document","getElementById","navigator","mediaDevices","getUserMedia","then","stream","srcObject","Promise","resolve","onloadedmetadata","catch","e","input","detection","onLoadedMetadata","this","onPlay","autoPlay","id","React","Component","Landing","to","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister"],"mappings":"4WAqEeA,G,kBA3DX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAEDC,MAAQ,GAHC,E,iMASdC,QAAQC,IAAIC,KAERC,EAAQC,SAASC,eAAe,UACvBD,SAASC,eAAe,UAErCC,UAAUC,aAAaC,aAAa,CAAEL,OAAO,IACxCM,MAAK,SAAUC,GAGZ,OAFAV,QAAQC,IAAI,QACZE,EAAMQ,UAAYD,EACX,IAAIE,SAAQ,SAAAC,GAAO,OAAIV,EAAMW,iBAAmBD,QAE1DE,OAAM,SAAAC,GAAC,OAAIhB,QAAQC,IAAIe,M,yPAM5BhB,QAAQC,IAAI,mB,SACNC,IAhCI,W,uBAiCJA,IAjCI,W,uBAkCJA,IAlCI,W,cAmCJe,EAAQb,SAASC,eAAe,UACtCL,QAAQC,IAAIgB,G,UACYf,IAAyBe,G,QAA3CC,E,OACNlB,QAAQC,IAAIiB,G,+PAMNhB,IA5CI,W,uBA6CJA,IA7CI,W,uBA8CJA,IA9CI,W,gIAoDV,OACI,6BACA,gDAEI,2BAAOiB,iBAAkBC,KAAKC,OAAQC,UAAU,EAAMC,GAAG,WACzD,4BAAQA,GAAI,gB,GAtDNC,IAAMC,Y,QCgBbC,E,iLAXP,OACI,6BACA,kBAAC,IAAD,CAAMC,GAAI,YAAV,0B,GALUH,IAAMC,W,OCuBbG,E,iLARX,OACE,kBAAC,IAAD,KACE,mBAVQ,kBACV,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,kBAAC,IAAD,CAAOI,KAAK,UAAUC,UAAWlC,QAMnC,W,GAbU2B,IAAMC,WCFJO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACT,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEFlC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUiC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.7a17ff8c.chunk.js","sourcesContent":["import React from 'react';\nimport * as faceapi from 'face-api.js';\nimport Webcam from \"react-webcam\";\nimport CameraModule from \"../CameraModule\"\n\nconst MODEL_URL = '/models'\n\n\nclass MainApp extends React.Component{\n    \n    constructor(props){\n        super(props);\n\n        this.state = {\n\n        }\n    }\n\n    async componentDidMount(){\n        console.log(faceapi.nets);\n\n        var video = document.getElementById(\"camera\");\n        var canvas = document.getElementById('result');\n\n        navigator.mediaDevices.getUserMedia({ video: true })\n            .then(function (stream) {\n                console.log(\"ping\");\n                video.srcObject = stream;\n                return new Promise(resolve => video.onloadedmetadata = resolve);\n            })\n            .catch(e => console.log(e));\n    }\n\n\n    async onPlay() {\n        \n        console.log(\"Media streamed!\")\n        await faceapi.loadFaceDetectionModel(MODEL_URL);\n        await faceapi.loadFaceLandmarkModel(MODEL_URL);\n        await faceapi.loadFaceRecognitionModel(MODEL_URL);\n        const input = document.getElementById('camera');\n        console.log(input);\n        const detection = await faceapi.detectSingleFace(input);\n        console.log(detection);\n    \n\n    }\n\n    async loadModels () {\n        await faceapi.loadFaceDetectionModel(MODEL_URL)\n        await faceapi.loadFaceLandmarkModel(MODEL_URL)\n        await faceapi.loadFaceRecognitionModel(MODEL_URL)\n      }\n    \n\n    render(){\n\n        return(\n            <div>\n            <h1>This is the app!</h1>\n\n                <video onLoadedMetadata={this.onPlay} autoPlay={true} id=\"camera\"></video>\n                <canvas id={\"result\"}></canvas>\n\n            </div>\n        );\n    }\n}\n\nexport default MainApp;","import React from 'react';\nimport MainApp from '../MainApp';\n\nimport {\n    BrowserRouter as Router,\n    Route,\n\n    Link\n  } from \"react-router-dom\";\n\nclass Landing extends React.Component{\n\n    render(){\n        return(\n            <div>\n            <Link to={'./launch'}>Start Application</Link>\n            </div>\n\n\n\n        );\n    }\n}\n\nexport default Landing;","import React from 'react';\nimport './App.css';\nimport Landing from './Components/Landing'\nimport MainApp from './Components/MainApp'\nimport * as faceapi from 'face-api.js';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\n\nclass App extends React.Component {\n\n  render() {\n    const App = () => (\n      <div>\n        <Switch>\n          <Route exact path='/' component={Landing}/>\n          <Route path='/launch' component={MainApp}/>\n        </Switch>\n      </div>\n    )\n    return (\n      <Switch>\n        <App/>\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n<BrowserRouter>\n    <App/>\n</BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}